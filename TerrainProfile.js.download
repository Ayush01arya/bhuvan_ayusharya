var TerrainProfile = (function() {


	function _(viewer)
	{
		this.viewer=viewer;
		viewer.scene.globe.depthTestAgainstTerrain = false;
		this.handler=new Cesium.ScreenSpaceEventHandler(viewer.canvas);
		this.polyline_positions=[];
		this.download_data=null;
		this.showProfile=false;
		this.billboards = viewer.scene.primitives.add(new Cesium.BillboardCollection());
		this.polyline_collection = viewer.scene.primitives.add(new Cesium.PolylineCollection());
		this.labels = viewer.scene.primitives.add(new Cesium.LabelCollection());
		
		this.label_position = viewer.entities.add({
						label : {
							show : false,
							showBackground : true,
							font : '14px monospace',
							fillColor : Cesium.Color.WHITE,
							outlineColor : Cesium.Color.BLACK,
							outlineWidth : 4,
							 style: Cesium.LabelStyle.FILL_AND_OUTLINE,
							horizontalOrigin : Cesium.HorizontalOrigin.LEFT,
							verticalOrigin : Cesium.VerticalOrigin.BOTTOM,
							pixelOffset : new Cesium.Cartesian2(5, 0)
						}
					});
	
		this.handler.setInputAction(function (click) {

				if(this.showProfile)
				{
					return ;
				}
				var ray = this.viewer.camera.getPickRay(click.position);
				var position = this.viewer.scene.globe.pick(ray, this.viewer.scene);
		
				this.polyline_positions.push(position);
				this.billboards.add({
					show : true,
					position : position,
					pixelOffset : new Cesium.Cartesian2(0.0, 0.0),
					eyeOffset : new Cesium.Cartesian3(0.0, 0.0, 0.0),
					horizontalOrigin : Cesium.HorizontalOrigin.CENTER,
					verticalOrigin : Cesium.VerticalOrigin.CENTER,
					scale : 1.0,
					image:"./img/dragIcon.png",
					color : new Cesium.Color(1.0, 1.0, 1.0, 1.0)
				});
				if(this.polyline_positions.length>1)
				{
						this.polyline_collection.add({
							positions : [this.polyline_positions[this.polyline_positions.length-1], this.polyline_positions[this.polyline_positions.length-2]],
							material : Cesium.Material.fromType('Color', {
								color : Cesium.Color.SPRINGGREEN
							}),
							width: 5
						});
						var distance=this.compute_distance([this.polyline_positions[this.polyline_positions.length-2], this.polyline_positions[this.polyline_positions.length-1]]);
						
						var result=new Cesium.Cartesian3();
						
						Cesium.Cartesian3.add(this.polyline_positions[this.polyline_positions.length-2], this.polyline_positions[this.polyline_positions.length-1], result) ;
						Cesium.Cartesian3.divideByScalar(result, 2, result);
						var label_text;
						if(distance > 1000)
						{
							label_text=(distance/1000).toFixed(3)+" Km";
						}else
						{
							label_text=distance.toFixed(3)+" m";
						}
						this.labels.add({
							position:result,
							text: label_text,
							 style: Cesium.LabelStyle.FILL_AND_OUTLINE,
							horizontalOrigin : Cesium.HorizontalOrigin.LEFT,
							verticalOrigin : Cesium.VerticalOrigin.BOTTOM,
							font : '40px sans-serif',
							scale : 0.5
					});
				}
				
		}.bind(this),Cesium.ScreenSpaceEventType.LEFT_CLICK);

		
		this.handler.setInputAction(function (movement) {
			
			var pickedObject = viewer.scene.pick(movement.endPosition);
			if(Cesium.defined(pickedObject) && Cesium.defined(pickedObject.primitive) )
			{
				if(pickedObject.primitive instanceof Cesium.Billboard)
				{
					
					 var cartesian=pickedObject.primitive.position;
					if (cartesian) {
						var cartographic = Cesium.Cartographic.fromCartesian(cartesian);
						var longitudeString = Cesium.Math.toDegrees(cartographic.longitude).toFixed(2);
						var latitudeString = Cesium.Math.toDegrees(cartographic.latitude).toFixed(2);
						
						this.label_position.position = cartesian;
						this.label_position.label.show = true;
						this.label_position.label.text ='Lon: ' + ('   ' + longitudeString).slice(-7) + '\u00B0' +'\nLat: ' + ('   ' + latitudeString).slice(-7) + '\u00B0';
					} else {
						this.label_position.label.show = false;
					}
				}else
				{
					this.label_position.label.show = false;
				}
			}else
			{
				this.label_position.label.show = false;
			}
			
        

		}.bind(this),Cesium.ScreenSpaceEventType.MOUSE_MOVE);
	}
	_.prototype.compute_distance=function(positions)
	{
		;
		var viewer=this.viewer;
		
		var surfacePositions = Cesium.PolylinePipeline.generateArc({
			positions: positions
		});
		var scratchCartesian3 = new Cesium.Cartesian3();
		var surfacePositionsLength = surfacePositions.length;
		var totalDistanceInMeters = 0;
		for (var i = 3; i < surfacePositionsLength; i += 3) {
			scratchCartesian3.x = surfacePositions[i] - surfacePositions[i - 3];
			scratchCartesian3.y = surfacePositions[i + 1] - surfacePositions[i - 2];
			scratchCartesian3.z = surfacePositions[i + 2] - surfacePositions[i - 1];
			totalDistanceInMeters += Cesium.Cartesian3.magnitude(scratchCartesian3);
		}
		
		
		return totalDistanceInMeters;

		
		
		
	}
	
	_.prototype.show_profile=function(positions,sample_distance)
	{
		this.showProfile=true;
		
		this.polyline_collection.removeAll();
		this.labels.removeAll();
		
		
           
		var SAMPLE_DIST=sample_distance;
		var latlong_carto=Cesium.Ellipsoid.WGS84.cartesianArrayToCartographicArray(positions);
		for(var i=0;i<=latlong_carto.length - 1;i++)
		{
            latlong_carto[i].height = 0;
        }
            
		//Find all the points
		var count = 0;
		var dist=0;
		var total_surf_dist=0;
		var dist_arr = [0];
		var ht = [];
		var inter_pts = [];
		for(i=1;i<=latlong_carto.length-1;i++)
		{                
			var samples = new Cesium.EllipsoidGeodesic(latlong_carto[i-1],latlong_carto[i],ellipsoid);    //Geodesic path between selected points
			var surface_dist=0;
			var fraction = parseInt((samples._distance)/SAMPLE_DIST)-1;
			var mid=Math.floor(fraction/2) + count ;
                   

			//Interpolate points using geodesic surface distance
			var j=1;
			while(j<=fraction){
			   inter_pts[count+j] = samples.interpolateUsingSurfaceDistance(SAMPLE_DIST*j);
			   ht[count+j] = viewer.scene.globe.getHeight(inter_pts[count+j]);
			   j++;
			}
			if(count==0){         // To push the starting point in inter_pts since this will be used only once
				inter_pts[count] = samples._start;
				ht[count] = viewer.scene.globe.getHeight(inter_pts[count]);

			}	
			inter_pts.push(samples._end);
			ht.push(viewer.scene.globe.getHeight(inter_pts[inter_pts.length-1]));
			
			for(k=1;k<=fraction+1;k++){
					dist = dist + ((Cesium.Cartesian3.distance(Cesium.Cartesian3.fromRadians(inter_pts[count+k-1].longitude,inter_pts[count+k-1].latitude),Cesium.Cartesian3.fromRadians(inter_pts[count+k].longitude,inter_pts[count+k].latitude)))/1000);
					surface_dist =surface_dist+ (Cesium.Cartesian3.distance(Cesium.Cartesian3.fromRadians(inter_pts[count+k-1].longitude,inter_pts[count+k-1].latitude,ht[count+k-1]),Cesium.Cartesian3.fromRadians(inter_pts[count+k].longitude,inter_pts[count+k].latitude,ht[count+k]))/1000);
				  
				   dist_arr[count+k] = dist;	
			}
			 total_surf_dist=total_surf_dist+surface_dist;
	
					
			var mid_pos=Cesium.Cartesian3.fromRadians(inter_pts[mid].longitude,inter_pts[mid].latitude,ht[mid]+15)
			

			this.labels.add({
				position:mid_pos,
				text: surface_dist.toFixed(2) + " km",
				horizontalOrigin : Cesium.HorizontalOrigin.LEFT,
				verticalOrigin : Cesium.VerticalOrigin.BOTTOM,
				font : '40px sans-serif',
				scale : 0.5
			});
					
			console.log(i+" surface_dist: "+surface_dist  +"\n distance : "+dist);
            count = count + fraction + 1;
        }
		$("#areal_distance").html("<br/>Total Areal Distance = "+total_surf_dist.toFixed(2) +" km");
		//Prepare Data for plotting and downloading				
		p_ht_arr = [];
		p_dist_arr = [];
		p_lat_arr = [];
		p_lon_arr = [];
		for(ii=0;ii<=inter_pts.length-1;ii++) {
				p_lat = Cesium.Math.toDegrees(inter_pts[ii].latitude);
				p_lon = Cesium.Math.toDegrees(inter_pts[ii].longitude);
				p_ht = ht[ii];
				p_dist = dist_arr[ii];
				if(typeof p_lat != 'undefined' && typeof p_lon != 'undefined' && typeof p_ht != 'undefined' && typeof p_dist != 'undefined'){
					p_lat_arr.push(p_lat);
					p_lon_arr.push(p_lon);
					p_ht_arr.push(p_ht);
					p_dist_arr.push(p_dist);
				}
		}
                

		for (pp=0;pp<=p_lat_arr.length-2;pp++){
			
			
			this.polyline_collection.add({
							positions : Cesium.Cartesian3.fromDegreesArrayHeights([p_lon_arr[pp], p_lat_arr[pp],p_ht_arr[pp],p_lon_arr[pp+1], p_lat_arr[pp+1],p_ht_arr[pp+1]]),
							material : Cesium.Material.fromType('Color', {
								color : Cesium.Color.SPRINGGREEN
							}),
							width: 5
						});

		
		}
		

                
		 //Plot the terrain profile
		var TESTER = document.getElementById('tester');
			Plotly.newPlot( TESTER, [{
			x: p_dist_arr,
			y: p_ht_arr }], {
			margin: { t: 0 },
			xaxis:{title:'Distance in km'},
			yaxis:{title:'Altitude in meters'} },{displaylogo:false,modeBarButtonsToRemove: ['sendDataToCloud', 'zoom2d', 'pan', 'pan2d', 'autoScale2d','select2d','lasso2d','zoomIn2d','zoomOut2d','autoScale2d','resetScale2d','hoverClosestCartesian','hoverCompareCartesian']});
	   this.download_data = "\r\nSN  Location             " + "           Altitude " + " Distance along path from origin(in km)";
		for(aa=0;aa<=p_lat_arr.length-1;aa++) {
			p_lat_arr[aa] = p_lat_arr[aa].toFixed(5);
			p_lon_arr[aa] = p_lon_arr[aa].toFixed(5);
			p_ht_arr[aa] = p_ht_arr[aa].toFixed(2);
			p_dist_arr[aa] = p_dist_arr[aa].toFixed(2);
			this.download_data = this.download_data + "\r\n" + (aa+1) + "   Lat: " + p_lat_arr[aa] + "," + "  Lon: " + p_lon_arr[aa] + "   " + p_ht_arr[aa] + "   " + p_dist_arr[aa];
		}							
           

            

		
		
		
	}
	
			// Download 1)Heights 2)Distances from original points, and 3)All the point locations
	_.prototype.download=function(filename, data)
	{
		  var element = document.createElement('a');
		  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(data));
		  element.setAttribute('download', filename);

		  element.style.display = 'none';
		  document.body.appendChild(element);

		  element.click();

		  document.body.removeChild(element);
	}
	_.prototype.get_count=function()
	{
		return this.polyline_positions.length;
	}
	_.prototype.clear=function()
	{
		this.polyline_positions=[];
		this.polyline_collection.removeAll();
		this.billboards.removeAll();
		this.labels.removeAll();
	}
	_.prototype.destroy=function()
	{
		viewer.scene.globe.depthTestAgainstTerrain = true;
		this.handler = this.handler && this.handler.destroy();
		this.polyline_positions=[];
		this.polyline_collection.removeAll();
		this.viewer.entities.remove(this.label_position);
		this.billboards.removeAll();
		this.labels.removeAll();
	}

	
	
	
	
	
	
	return _;
})();